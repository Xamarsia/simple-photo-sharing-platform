package com.xamarsia.simplephotosharingplatform.security.authentication;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.GetMapping;

import com.xamarsia.simplephotosharingplatform.common.EmptyJson;

/**
 * @brief Controller for handling authentication operations.
 * 
 *        This controller manages endpoints related to authentication,
 *        including saving and checking if authentication is currently in use.
 */
@Validated
@RestController
@RequestMapping("/auth")
@RequiredArgsConstructor
public class AuthController {
    private final AuthService authService;

    /**
     * @brief Create an {@link Auth} object based on authentication generated by
     *        authentication server.
     * 
     *        Handles POST requests to the endpoint: `/auth`
     * 
     * @param authentication The {@link Authentication} object.
     * @return A {@link ResponseEntity} containing a empty Json.
     */
    @PostMapping("")
    public ResponseEntity<EmptyJson> createAuth(Authentication authentication) {
        authService.createAuth(authentication);
        return ResponseEntity.status(HttpStatus.OK).body(new EmptyJson());
    }

    /**
     * @brief Check if authentication is used.
     * 
     *        Handles GET requests to the endpoint: `/auth/isUsed`
     * 
     * @param authentication The {@link Authentication} object.
     * @return A {@link ResponseEntity} containing a boolean indicating if
     *         authentication is used.
     */
    @GetMapping("/isUsed")
    public ResponseEntity<Boolean> isAuthUsed(Authentication authentication) {
        Boolean isAuthUsed = authService.isAuthUsed(authentication);
        return ResponseEntity.ok().body(isAuthUsed);
    }
}
